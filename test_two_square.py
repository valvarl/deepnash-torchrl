import numpy as np

from stratego_gym.envs.detectors import TwoSquareDetector
from stratego_gym.envs.primitives import Player, Piece


detector = TwoSquareDetector()

_update = lambda player, piece, from_pos, to_pos, reverse=False: detector.update(player, piece, from_pos if not reverse else (from_pos[1], from_pos[0]), to_pos if not reverse else (to_pos[1], to_pos[0]))
_validate_move = lambda player, piece, from_pos, to_pos, reverse=False: detector.validate_move(player, piece, from_pos if not reverse else (from_pos[1], from_pos[0]), to_pos if not reverse else (to_pos[1], to_pos[0]))
setattr(detector, "_update", _update)
setattr(detector, "_validate_move", _validate_move)
reverse = True
detector._update(Player.RED, Piece.SCOUT, (0, 0), (0, 5), reverse)    
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 0), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 0), (0, 5), reverse)
print(detector.p1)
print(detector._validate_move(Player.RED, Piece.SCOUT, (0, 5), (0, 0), reverse))
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, -1), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, -1), (0, 5), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 3), reverse)
print(detector.p1)
print(detector._validate_move(Player.RED, Piece.SCOUT, (0, 3), (0, 5)), reverse)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, 6), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 6), (0, 3), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, 5), reverse)
print(detector.p1)
print(detector._validate_move(Player.RED, Piece.SCOUT, (0, 5), (0, 3)), reverse)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 2), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 2), (0, 5), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 3), reverse)
print(detector.p1)
print(detector._validate_move(Player.RED, Piece.SCOUT, (0, 3), (0, 5)), reverse)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, 6), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 6), (0, 1), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 1), (0, 3), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, -1), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, -1), (0, 5), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 3), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, 6), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 6), (0, 3), reverse)
print(detector.p1)
detector._update(Player.RED, Piece.SCOUT, (0, 3), (0, 5), reverse)
print(detector.p1)
print(detector._validate_move(Player.RED, Piece.SCOUT, (0, 5), (0, 3)), reverse)
detector._update(Player.RED, Piece.SCOUT, (0, 5), (0, 2), reverse)
print(detector.p1)

# detector.update(Player.RED, Piece.SCOUT, (0, 1), (0, 5))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, 5), (0, 1))
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, 1), (0, 3))
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, 3), (0, -1))
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, -1), (0, 3))
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, 3), (0, -1))
# print(detector.p1)
# detector.update(Player.RED, Piece.SCOUT, (0, -1), (0, 3))
# print(detector.p1)

# detector.update(Player.RED, Piece.SPY, (0, 0), (0, 1))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 1), (0, 0))
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 0), (0, 1))
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 1), (0, 0))
# print(detector.p1)

# detector.update(Player.RED, Piece.SPY, (0, 0), (0, 1))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 1), (0, 2))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 2), (0, 3))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 3), (0, 2))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 2), (0, 1))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 1), (0, 0))    
# print(detector.p1)

# detector.update(Player.RED, Piece.SPY, (0, 0), (1, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (1, 0), (2, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (2, 0), (3, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (3, 0), (2, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (2, 0), (1, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (1, 0), (0, 0))    
# print(detector.p1)

# detector.update(Player.RED, Piece.SPY, (0, 0), (-1, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, 0), (-1, -1))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, -1), (0, -1))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, 0), (0, 0))    
# print(detector.p1)

# detector.update(Player.RED, Piece.SPY, (0, 0), (-1, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, 0), (-2, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-2, 0), (-1, 0)) 
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, 0), (0, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 0), (-1, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (-1, 0), (0, 0))    
# print(detector.p1)
# detector.update(Player.RED, Piece.SPY, (0, 0), (-1, 0))    
# print(detector.p1)